openapi: 3.0.1
info:
  title: Library Management System API
  version: '1.0.0'
  description: RESTful API for managing books in a library

servers:
  - description: Local server
    url: 'http://localhost:8080'

paths:
  /api/books:
    get:
      summary: Get all books
      operationId: getAllBooks
      tags:
        - Books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Books'
        '500':
          $ref: '#/components/schemas/ExceptionResponse'
        '400':
          $ref: '#/components/schemas/ExceptionResponse'

    post:
      summary: Create a new book
      operationId: createBook
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Books'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
        '500':
          $ref: '#/components/schemas/ExceptionResponse'
        '400':
          $ref: '#/components/schemas/ExceptionResponse'

  /api/books/{id}:
    get:
      summary: Get a book by ID
      operationId: getBook
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: long
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
        '500':
          $ref: '#/components/schemas/ExceptionResponse'
        '404':
          $ref: '#/components/schemas/ExceptionResponse'

    put:
      summary: Update an existing book
      operationId: updateBook
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: long
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Books'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
        '500':
          $ref: '#/components/schemas/ExceptionResponse'
        '400':
          $ref: '#/components/schemas/ExceptionResponse'
        '404':
          $ref: '#/components/schemas/ExceptionResponse'

    delete:
      summary: Delete a book
      operationId: deleteBook
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: long
      responses:
        '204':
          description: Book deleted successfully
        '500':
          $ref: '#/components/schemas/ExceptionResponse'
        '404':
          $ref: '#/components/schemas/ExceptionResponse'

components:
  schemas:
    Books:
      type: object
      required:
        - title
        - author
        - publicationYear
      properties:
        id:
          type: integer
          format: integer
          example: 1
        title:
          type: string
          example: "Java: A Beginner's Guide"
        author:
          type: string
          example: "Herbert Schildt"
        publicationYear:
          type: integer
          example: 2002
    ExceptionResponse:
      type: object
      properties:
        message:
          type: string
      description: Generic response representating the exception
